#! /bin/sh

incrementMajor(){
  VERSION="$1"
  MAJOR=$(echo "$VERSION" | cut -d. -f1)
  printf "%s.0.0" "$((MAJOR+1))"
}

incrementMinor(){
  VERSION="$1"
  MAJOR=$(echo "$VERSION" | cut -d. -f1)
  MINOR=$(echo "$VERSION" | cut -d. -f2)
  PATCH=$(echo "$VERSION" | cut -d. -f3 | cut -d- -f1)
  printf "%s.%s.%s" "$MAJOR" "$((MINOR+1))" "$PATCH"
}

incrementPatch(){
  VERSION="$1"
  MAJOR=$(echo "$VERSION" | cut -d. -f1)
  MINOR=$(echo "$VERSION" | cut -d. -f2)
  PATCH=$(echo "$VERSION" | cut -d. -f3 | cut -d- -f1)
  printf "%s.%s.%s" "$MAJOR" "$MINOR" "$((PATCH+1))"
}

hasChange(){
  TYPE="$1"
  DIR="$2"
  VERSION="$3"
  cd "$DIR" || return
  if git log --oneline "$VERSION..HEAD" | grep -q "^[a-z0-9]*\\s$TYPE/"; then
    return 0
  fi 
  return 1
}

hasBreakingChanges(){
  if hasChange "break" "$1" "$2"; then
    return 0
  fi
  return 1
}

hasFeatureChanges(){
  if hasChange "feature" "$1" "$2"; then
    return 0
  fi
  return 1
}

hasPatchChanges(){
  if hasChange "bugfix" "$1" "$2"; then
    return 0
  fi
  return 1
}

getLastVersion(){
  DIR="$1"
  cd "$DIR" || return
  git describe --abbrev=0 2>/dev/null
}

getNextVersion() {
  DIR="$1"
  VERSION=$(getLastVersion "$DIR")
  if [ "$VERSION" = "" ]; then
    echo "0.1.0"
  else
    if hasBreakingChanges "$DIR" "$(getLastVersion "$DIR")"; then
      incrementMajor "$VERSION"
      exit 0
    fi

    if hasFeatureChanges "$DIR"  "$(getLastVersion "$DIR")"; then
      incrementMinor "$VERSION"
      exit 0
    fi

    if hasPatchChanges "$DIR"  "$(getLastVersion "$DIR")"; then
      incrementPatch "$VERSION"
      exit 0
    fi

  fi
}
